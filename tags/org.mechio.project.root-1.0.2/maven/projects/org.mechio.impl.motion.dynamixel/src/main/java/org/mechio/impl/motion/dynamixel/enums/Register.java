/* *  Copyright 2014 the MechIO Project. All rights reserved. *  *  Redistribution and use in source and binary forms, with or without modification, are *  permitted provided that the following conditions are met: *   *     1. Redistributions of source code must retain the above copyright notice, this list of *        conditions and the following disclaimer. *   *     2. Redistributions in binary form must reproduce the above copyright notice, this list *        of conditions and the following disclaimer in the documentation and/or other materials *        provided with the distribution. *   *  THIS SOFTWARE IS PROVIDED BY THE MECHIO PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND *  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE MECHIO PROJECT OR *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *   *  The views and conclusions contained in the software and documentation are those of the *  authors and should not be interpreted as representing official policies, either expressed *  or implied, of the MechIO Projectimpl.. */package org.mechio.impl.motion.dynamixel.enums;/** * Defines the various Registers of a DynamixelJoint. * Contains the Register address, number of bytes, and caching and  * synchronization information. *  * @author Matthew Stevenson */public enum Register {    /**     *     */    ModelNumber((byte)0, 2),    /**     *     */    FirmwareVersion((byte)2, 1),    /**     *     */    Id((byte)3, 1),    /**     *     */    BaudRate((byte)4, 1),    /**     *     */    ReturnDelay((byte)5, 1),    /**     *     */    CwAngleLimit((byte)6, 2),    /**     *     */    CcwAngleLimit((byte)8, 2),    /**     *     */    TemperatureLimit((byte)11, 1),    /**     *     */    LowVoltageLimit((byte)12, 1),    /**     *     */    HighVoltageLimit((byte)13, 1),    /**     *     */    MaxTorque((byte)14, 2),    /**     *     */    StatusReturnLevel((byte)16, 1),    /**     *     */    AlarmLed((byte)17, 1),    /**     *     */    AlarmShutdown((byte)18, 1),    /**     *     */    DownCalibration((byte)20, 2),    /**     *     */    UpCalibration((byte)22, 2),    /**     *     */    TorqueEnable((byte)24, 1),    /**     *     */    Led((byte)25, 1),    /**     *     */    CwComplianceMargin((byte)26, 1),    /**     *     */    CcwComplianceMargin((byte)27, 1),    /**     *     */    CwComplianceSlope((byte)28, 1),    /**     *     */    CcwComplianceSlope((byte)29, 1),    /**     *     */    GoalPosition((byte)30, 2, true, true),    /**     *     */    MovingSpeed((byte)32, 2),    /**     *     */    TorqueLimit((byte)34, 2),    /**     *     */    CurrentPosition((byte)36, 2, false),    /**     *     */    CurrentSpeed((byte)38, 2, false),    /**     *     */    CurrentLoad((byte)40, 2, false),    /**     *     */    CurrentVoltage((byte)42, 1, false),    /**     *     */    CurrentTemperature((byte)43, 1, false),    /**     *     */    RegisteredInstruction((byte)44, 1),    /**     *     */    Moving((byte)46, 1, false),    /**     *     */    Lock((byte)47, 1),    /**     *     */    Punch((byte)48, 2);	private byte myByte;    private int myLength;    private boolean myCachedFlag;    private boolean mySynchronizedFlag;    /**     * Defines a register starting at the given address with the given length.     * The register is set to be cached and not synchronized.     * @param b register start address     * @param l number of bytes     */	Register(byte b, int l){        this(b, l, true, false);	}    /**     * Defines a register starting at the given address with the given length.     * The register is set to not be synchronized.     * @param b register start address     * @param l number of bytes     * @param cache if true, this Register is cached     */    Register(byte b, int l, boolean cache){        this(b, l, cache, false);	}    /**     * Defines a register starting at the given address with the given length.     * @param b register start address     * @param l number of bytes     * @param cache if true, this Register is cached     * @param sync if true, this Register is used during a standard synchronized      * write.  All synchronized registers must have consecutive addresses     */    Register(byte b, int l, boolean cache, boolean sync){		myByte = b;        myLength = l;        myCachedFlag = cache;        mySynchronizedFlag = sync;	}	    /**     * Returns the Register address as a byte.     * @return Register address as a byte     */    public byte getByte(){		return myByte;	}    /**     * Returns the number of bytes associated with the Register.     * @return number of bytes associated with the Register     */    public int getLength(){        return myLength;    }    /**     * Is the Registered cached.     * @return true if the Register value is cached by the DynamixelJoint     */    public boolean isCached(){        return myCachedFlag;    }    /**     * Is the Registered included in a standard synchronized write.     * @return true if the Register is included in a standard synchronized write     */    public boolean isSynchronized(){        return mySynchronizedFlag;    }    /**     * Returns the Register value with the given address.     * @param b Register address     * @return Register value with the given address     */    public static Register get(byte b){		for(Register es : values()){			if(b == es.getByte()){				return es;			}		}		return null;	}}